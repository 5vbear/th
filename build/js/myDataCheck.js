/*
 * file : myDataCheck.js
 *
 * 入力項目の確認を行うスクリプト
 *
 * @since   2003.04.05
 * @author  Atsushi iwasaki
 * $Id: 
 */


/*******************************************************************************
 * 半角英数字確認処理.
 *
 * 指定文字列が半角英数字(「-」,「_」含まない)か判定する。
 * 半角英数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeAlpNum( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9a-zA-Z]+/g );
    // 使用可能文字以外の場合
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 半角英数字確認処理.
 *
 * 指定文字列が半角英数字(「-」,「_」含まない。「*」は許容)か判定する。
 * 半角英数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeAlpNumWC( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9a-zA-Z\*]+/g );
    // 使用可能文字以外の場合
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 半角英数字確認処理.
 *
 * 指定文字列が半角英数字(「-」,「_」含まない。「?」は許容)か判定する。
 * 半角英数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeAlpNumQM( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9a-zA-Z\?]+/g );
    // 使用可能文字以外の場合
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 半角英数字確認処理.
 *
 * 指定文字列が半角英数字(「-」,「_」含む)か判定する。
 * 半角英数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsize( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9a-zA-Z\-\_]+/g );
    // 使用可能文字以外の場合
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 半角英数字確認処理.
 *
 * 指定文字列が半角英数字(「-」含む)か判定する。
 * 半角英数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsize2( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9a-zA-Z\-]+/g );
    // 使用可能文字以外の場合
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 半角英数字確認処理.
 *
 * 指定文字列が半角英数字(「-」,「_」含む)か判定する。
 * 半角英数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeWC( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9a-zA-Z\-\_\*]+/g );
    // 使用可能文字以外の場合
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 全角文字確認処理.
 *
 * 指定文字列が全角文字（半角英数、「-」,「_」含む）か判定する。
 * 使用可能文字以外が含まれている場合-2を返す。
 *
 * @param  str     確認する文字列
 * @return         判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkFullsize( str ){
    var tmp;
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    for ( i = 0; i < str.length; i++ ) {
        tmp = escape( str.charAt( i ) );
        // 全角(4bute)文字以外の場合
        if ( tmp.length < 4 ) { 
            // 半角英数字("-", "_" 含む)の場合
            if( checkHalfsize( str ) != 0) {
                return -2;
            }
        }
        // 半角カナ文字の場合
        else if( checkHalfsizeKana( str ) != 0 ) {
            return -2;
        }
    }
    return 0;
}

/*******************************************************************************
 * 全角文字確認処理.
 *
 * 指定文字列の中に全角文字（半角カナ以外）が存在するか判定する。
 * 使用可能文字以外が含まれている場合-2を返す。
 *
 * @param  str     確認する文字列
 * @return         判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkFullsize2( str ){

    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

	// 半角英字チェック
	if ( existsHalfsizeAlpha( str ) ){
		return -2;
	}

	// 半角数字チェック
	if ( existsHalfsizeNum( str ) ){
		return -2;
	}

	// 半角記号チェック
	if ( existsHalfsizeKigou( str ) ){
		return -2;
	}
	
	// 半角カナチェック
    var ret = checkHalfsizeKana( str );
    return ret;
}

/*******************************************************************************
 * 全角文字確認処理.
 *
 * 指定文字列の中に全角文字（半角カナ以外。「*」 許容）が存在するか判定する。
 * 使用可能文字以外が含まれている場合-2を返す。
 *
 * @param  str     確認する文字列
 * @return         判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkFullsize3( str ){

    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

	// 半角英字チェック
	if ( existsHalfsizeAlpha( str ) ){
		return -2;
	}

	// 半角数字チェック
	if ( existsHalfsizeNum( str ) ){
		return -2;
	}

	// 半角記号チェック
	// 許容文字を取り除く
	var tmpStr = str.replace(/[\*]/g,'');
	
	if ( existsHalfsizeKigou( tmpStr ) ){
		return -2;
	}

	// 半角カナチェック
    var ret = checkHalfsizeKana( str );
    return ret;
}

/*******************************************************************************
 * 半角数字確認処理.
 *
 * 指定文字列が半角数字か判定する。
 * 半角数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeNum( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9]+/g );
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 半角数字確認処理.
 *
 * 指定文字列が半角数字か判定する。
 * 半角数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeNumWC( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9\*]+/g );
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 半角カナ確認処理.
 *
 * 指定文字列内に半角カナ文字が存在するか判定する。
 * 半角カナ文字が含まれている場合-2、含まれていない場合、0を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeKana( str ) {

    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }
    // 半角カナが含まれている場合
    if ( str.match(/[｡-ﾟ]/) ){

        return -2;

    }
    return 0;
}

/*******************************************************************************
 * 全角カナ確認処理.
 *
 * 指定文字列が全角カナ文字か判定する。
 * すべて全角カナの場合のみ0を返す。
 *
 * @param  str        確認する文字列
 * @return            判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkFullsizeKana( str ){
    var code;
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    for ( i = 0; i < str.length; i++ ) {
        code = str.charCodeAt( i );
        // 全角カナの場合
        if ( 12449 <= code && code <= 12542 ) {
            continue;
        }
        else {
            return -2;
        }
    }
    return 0;
}

/*******************************************************************************
 * メールアドレス確認処理.
 *
 * メールアドレス内に不正な文字が存在するか判定する。
 * 使用可能文字（半角英数、「-」,「_」,「.」,「@」）の場合のみ0を返す。
 *
 * @param  mailAddress     確認するメールアドレス
 * @return                 判定結果（0：正常 -1:空 -2:入力エラー -3:特殊エラー
                                     -4: 非許容メールアドレス）
 ******************************************************************************/
function checkMailAddress( mailAddress ) {
    // 空白文字削除
    mailAddress = myTrim( mailAddress );

    // 指定文字列が空の場合
    if( mailAddress == "" ) {
        return -1;
    }

    // 半角英数字と「-」,「_」「.」「@」以外の文字はエラー
    checkedStr = mailAddress.match( /[0-9a-zA-Z\-\_\.\@]+/g );
    if ( checkedStr != mailAddress ) {
        return -2;
    }

    // 「@」検索
    var index;
    index = mailAddress.indexOf( "@", 0 );
    
    if( index < 0 ) {
        return -3;
    }
    
    var tmp;
    
    tmp = mailAddress.substring(index + 1 );
    
    //「.」（ドメインの有無）
    index = tmp.indexOf( ".", 0 );
    
    if( index < 0 ) {
        return -4;
    }

    return 0;
}

/*******************************************************************************
 * メールアドレス確認処理.
 *
 * メールアドレス内に不正な文字が存在するか判定する。
 * 使用可能文字（半角英数、「-」,「_」,「.」,「@」）の場合のみ0を返す。
 *
 * @param  mailAddress     確認するメールアドレス
 * @return                 判定結果（0：正常 -1:空 -2:入力エラー -3:特殊エラー）
 ******************************************************************************/
function checkMailAddressWC( mailAddress ) {
    // 空白文字削除
    mailAddress = myTrim( mailAddress );

    // 指定文字列が空の場合
    if( mailAddress == "" ) {
        return -1;
    }

    // 半角英数字と「-」,「_」「.」「@」「*」以外の文字はエラー
    checkedStr = mailAddress.match( /[0-9a-zA-Z\-\_\.\@\*]+/g );
    if ( checkedStr != mailAddress ) {
        return -2;
    }

    return 0;
}

/*******************************************************************************
 * 空白除去処理.
 *
 * 文字列の左右にある空白を削除する。
 *
 * @param  str             空白を削除する文字列
 * @return                 空白を削除した文字列
 ******************************************************************************/
function myTrim( str ) {
    // 空白削除
    for ( i = 0; i < str.length; ) {
        // 左端に空白がある
        if( ( str.substring( 0, 1 ) == " " ) ||
            ( str.substring( 0, 1 ) == "　" ) ) {
            str = str.substring( i + 1, str.length );
        }
        // 右端に空白がある
        else if( ( str.substring( str.length - 1, str.length ) == " " ) ||
                 ( str.substring( str.length - 1, str.length ) == "　" ) ) {
            str = str.substring( 0, str.length - ( i + 1 ) );
        }
        // 空白がない
        else {
            break;
        }
    }
    return str;
}

/*******************************************************************************
 * 検索条件半角英数字確認処理.
 *
 * ユーザ情報検索で指定文字列が半角英数字(「-」,「_」,「*」含む)か判定する。
 * 半角英数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkSearchHalfsize( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9a-zA-Z\-\_*]+/g );
    // 使用可能文字以外の場合
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 検索条件全角カナ確認処理.
 *
 * 指定文字列が全角カナ文字（「*」含む）か判定する。
 * 全角カナ（「*」含む）の場合のみ0を返す。
 *
 * @param  str        確認する文字列
 * @return            判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkFullsizeKana2( str ){
    var code;
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    for ( i = 0; i < str.length; i++ ) {
        code = str.charCodeAt( i );
        // 全角カナの場合
        if ( 12449 <= code && code <= 12542 ) {
            continue;
        }
        // 「*」(ワイルドカード）の場合
        else if( code == 65290 || code == 42 ) {
            continue;
        }

// 20051206 add(s)
        // 全角スペース入力許容
        else if( code == 12288) {
            continue;
        }
// 20051206 add(e)

        else {
            return -2;
        }
    }
    return 0;
}

/*******************************************************************************
 * シリアルNo.確認処理.
 *
 * シリアルNo.が正しく入力されているかを確認
 *
 * @param  str        確認する文字列
 * @return            判定結果（0:正常 -2:入力エラー）
 ******************************************************************************/
function checkSerialNoStr( str ){
    var code;
    // 空白文字削除
    str = myTrim( str );

    if(str.length != 12){
        return -2;
    }

    for ( i = 0; i < str.length; i++ ) {
        code = str.charAt( i );

        if ( i>=0 && i<=3 && code>='A' && code <='Z' ) {
            continue;
        }
        else if ( i>=4 && i<=9 && code>='0' && code <='9' ) {
            continue;
        }
        else if ( i == 10 && code == 'J' ) {
            continue;
        }
        else if ( i == 11 && code == 'P' ) {
            continue;
        }
        else{
            return -2;
        }
    }
    return 0;
}

/*******************************************************************************
 * シリアルNo.確認処理.
 *
 * シリアルNo.が正しく入力されているかを確認
 *
 * @param  str        確認する文字列
 * @return            判定結果（0:正常 -2:入力エラー）
 ******************************************************************************/
function checkSerialNoStr11( str ){
    var code;
    // 空白文字削除
    str = myTrim( str );

    if(str.length != 12){
        return -2;
    }

    for ( i = 0; i < str.length; i++ ) {
        code = str.charAt( i );

        if ( i>=0 && i<=3 && code>='A' && code <='Z' ) {
            continue;
        }
        else if ( i>=4 && i<=9 && code>='0' && code <='9' ) {
            continue;
        }
        else if ( i>=10 && i<=11 && code>='A' && code <='Z' ) {
            continue;
        }
        else{
            return -2;
        }
    }
    return 0;
}

/*******************************************************************************
 * ニックネーム時の「,」制限処理.
 *
 * 指定文字列にカンマか入力されているか判定する。
 * 機種依存文字が入っていない場合０を返す。
 *
 * @param  str        確認する文字列
 * @return            判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkComma( str ){
    var code;
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    for ( i = 0; i < str.length; i++ ) {
        txt = str.charAt( i );

       // 機種依存文字の場合
        if(!(",".indexOf(txt,0 ) )){
            return -2;
        }
        else {
            continue;
        }
    }
    return 0;
}

/*******************************************************************************
 * 機種依存文字確認処理.
 *
 * 指定文字列が機種依存文字か判定する。
 * 機種依存文字が入っていない場合０を返す。
 *
 * @param  str        確認する文字列
 * @return            判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkModelDepend( str ){
    var code;
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    for ( i = 0; i < str.length; i++ ) {
        code = str.charCodeAt( i );

       // 機種依存文字の場合
        if(( 9312 <= code && code <= 9331 ) ||
           ( 8554 <= code && code <= 8569 ) ||
           ( 12849 == code ) || (code == 12850) || (code == 12857 ) ){
            return -2;
        }
        else {
            continue;
        }
    }
    return 0;
}

/*******************************************************************************
 * 半角数字確認処理.
 *
 * 指定文字列が半角数字か判定する。
 * 半角数字以外が含まれている場合-2を返す。
 * なお、負の数("-")が先頭につく場合は、正常の判定にする。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeNumMP( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /^\-?[0-9]+/g );
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 半角英数字確認処理.
 *
 * 指定文字列が半角英数字(「-」,「_」,「*｣ , ｢?｣ 許容)か判定する。
 * 半角英数字以外が含まれている場合-2を返す。
 *
 * @param  str         確認する文字列
 * @return             判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkHalfsizeAlpNumWC2( str ) {
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    checkedStr = str.match( /[0-9a-zA-Z\-\_\*\?]+/g );
    // 使用可能文字以外の場合
    if ( checkedStr != str ) {
        return -2;
    }
    return 0;
}

/*******************************************************************************
 * 全角文字確認処理.
 *
 * 指定文字列の中に全角文字（半角カナ以外。「*」｢?｣ 許容）が存在するか判定する。
 * 使用可能文字以外が含まれている場合-2を返す。
 *
 * @param  str     確認する文字列
 * @return         判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkFullsizeWC( str ){

    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

	// 半角英字チェック
	if ( existsHalfsizeAlpha( str ) ){
		return -2;
	}

	// 半角数字チェック
	if ( existsHalfsizeNum( str ) ){
		return -2;
	}

	// 半角記号チェック
	// 許容文字を取り除く
	var tmpStr = str.replace(/[\*\?]/g,'');
	
	if ( existsHalfsizeKigou( tmpStr ) ){
		return -2;
	}

	// 半角カナチェック
    var ret = checkHalfsizeKana( str );
    return ret;
}

/*******************************************************************************
 * 検索条件全角カナ確認処理.
 *
 * 指定文字列が全角カナ文字（「*」｢?｣ 許容）か判定する。
 * 全角カナの場合のみ0を返す。
 *
 * @param  str        確認する文字列
 * @return            判定結果（0:正常 -1:空 -2:入力エラー）
 ******************************************************************************/
function checkFullsizeKanaWC( str ){
    var code;
    // 空白文字削除
    str = myTrim( str );

    // 指定文字列が空の場合
    if( str == "" ) {
        return -1;
    }

    for ( i = 0; i < str.length; i++ ) {
        code = str.charCodeAt( i );
        // 全角カナの場合
        if ( 12449 <= code && code <= 12542 ) {
            continue;
        }
        
        // 「*」｢?｣ を許容する
        else if( code == 42 || code == 63 ){
    
            continue;
        }

        // 全角スペース入力許容
        else if( code == 12288) {
            continue;
        }

        else {
            return -2;
        }
    }
    return 0;
}

// 20090422 satou mod
function returnCancel(evt) {

    if(evt.keyCode == 13) {
        if(evt.preventDefault) {
          evt.preventDefault();
        } else {
          evt.returnValue = false;
        }
    }
}

// 20090508 satou mod　アプリ懸案事項32，35対応 
/************************************************************
 * テキスト入力欄有効/無効制御.
 *
 * radioボタンのオブジェクト配列を受け取り、
 * いずれかがチェックされていた場合、click()メソッドを実行する。
 * radioボタンに指定されたonClickイベントを発生させて、
 * 対応するテキスト入力欄を有効にする。
 *
 * @param list 判定対象radioボタンオブジェクト配列
 * @ return なし
 ************************************************************/
 function ctrlTextArea( list ){
 
       for (var i = 0; i < list.length ;i++){
        	if(list[i].checked){
		
        		list[i].click();
        	} 
       }
 
 }
/*******************************************************************************
 * 半角数字確認処理.
 *
 * 指定文字列をチェックする。半角数字が含まれている場合 true を返す。
 * trim() や、空文字チェックを行わないので、直接呼び出す際は注意すること
 *
 * @param  str         確認する文字列
 * @return             判定結果（true:含まれている false:含まれていない）
 ******************************************************************************/
function existsHalfsizeNum( str ) {
    if ( str.match(/[0-9]/) ) {
        return true;
    }
    return false;
}
/*******************************************************************************
 * 半角記号確認処理.
 *
 * 指定文字列をチェックする。半角記号が含まれている場合 true を返す。
 * trim() や、空文字チェックを行わないので、直接呼び出す際は注意すること
 * バックスラッシュ(\u005C)と、円マーク(\u00A5)は MacOS 環境下では区別されるが、
 * Windows 環境下では、円マークもバックスラッシュ(\u005C)として認識されるため、
 * 円マークをコード指定(\u00A5)。
 * 特殊記号の一覧：
 *  (半角スペース)!"#$%&'()*+,-./:;<=>?@[\]^_`{|}~\u00A5(円マーク)
 * 全 34 文字
 *
 * @param  str         確認する文字列
 * @return             判定結果（true:含まれている false:含まれていない）
 ******************************************************************************/
function existsHalfsizeKigou( str ) {
    if ( str.match(/[\ \!\"\#\$\%\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\?\@\[\\\]\^\_\`\{\|\}\~\u00A5]/) ){
        return true;
    }
    return false;
}

/*******************************************************************************
 * 半角英字確認処理.
 *
 * 指定文字列をチェックする。半角英字が含まれている場合 true を返す。
 * trim() や、空文字チェックを行わないので、直接呼び出す際は注意すること
 *
 * @param  str         確認する文字列
 * @return             判定結果（true:含まれている false:含まれていない）
 ******************************************************************************/
function existsHalfsizeAlpha( str ) {
    if ( str.match(/[a-zA-Z]/) ){
        return true;
    }
    return false;
}
 